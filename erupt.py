import json,os,re,pickle,subprocess
import photoshop.api as ps
from ActionManager import *

#Node.js check
nodestate = os.popen('node --version')
if not re.match('^v\d*\.\d*\.\d*',nodestate.read()):
  raise RuntimeError('Please check if Node.js is installed to PATH!')

#This js piece implements ps classes and methods, and make a script generated by ScriptListener Plug-In 'erupts' its data in the form of JSON.
eruptjst = '''
class psClass {
	constructor(data) {
		this.data = data
	}
}

class psUnitDouble {
	constructor(unit,ndouble) {
		this.unit = unit
		this.double = ndouble
	}
}

class psEnumerated {
	constructor(enumtype,enumval) {
		this.enumtype = enumtype
		this.enumval = enumval
	}
}

function charIDToTypeID(chr) {
	return 'psChar_'+chr
}
function stringIDToTypeID(str) {
	return str
}

class ActionDescriptor {
	constructor() {this.asdict = {}}
	putInteger(key,val) {this.asdict[key] = val}
	putDouble(key,val) {this.asdict[key] = val}
	putUnitDouble(key,unit,ndouble) {this.asdict[key] = new psUnitDouble(unit,ndouble)}
	putString(key,val) {this.asdict[key] = val}
	putBoolean(key,val) {this.asdict[key] = val}
	putEnumerated(key,enumtype,enumval) {this.asdict[key] = new psEnumerated(enumtype,enumval)}
	putObject(key,psclass,val) {val['psclass'] = psclass; this.asdict[key] = val}
	putReference(key,val) {this.asdict[key] = val}
	putList(key,val) {this.asdict[key] = val}
	putClass(key,val) {this.asdict[key] = new psClass(val)}
}

class ActionList {
	constructor() {this.aslist = []}
	putInteger(val) {this.aslist.push(val)}
	putDouble(val) {this.aslist.push(val)}
	putUnitDouble(unit,ndouble) {this.aslist.push(new psUnitDouble(unit,ndouble))}
	putString(val) {this.aslist.push(val)}
	putBoolean(val) {this.aslist.push(val)}
	putEnumerated(enumtype,enumval) {this.aslist.push(new psEnumerated(enumtype,enumval))}
	putObject(psclass,val) {val['psclass'] = psclass; this.aslist.push(val)}
	putReference(val) {this.aslist.push(val)}
	putList(val) {this.aslist.push(val)}
	putClass(key,val) {this.aslist.push(new psClass(val))}
}

class ActionReference {
	constructor() {}
	putClass(dcls) {this.DesiredClass = dcls; this.FormType = 'Class'}
	putEnumerated(dcls,enumtype,enumval) {this.DesiredClass = dcls; this.FormType = 'Enumerated'; this.Value = new psEnumerated(enumtype,enumval)}
	putIdentifier(dcls,val) {this.DesiredClass = dcls; this.FormType = 'Identifier'; this.Value = val}
	putIndex(dcls,val) {this.DesiredClass = dcls; this.FormType = 'Index'; this.Value = val}
	putName(dcls,val) {this.DesiredClass = dcls; this.FormType = 'Name'; this.Value = val}
	putOffset(dcls,val) {this.DesiredClass = dcls; this.FormType = 'Offset'; this.Value = val}
	putProperty(dcls,val) {this.DesiredClass = dcls; this.FormType = 'Property'; this.Value = val}
}

var DialogModes = new Object
DialogModes.ALL = 'All'
DialogModes.ERROR = 'Error'
DialogModes.NO = 'No'

function executeAction(operate,desc,exeoption) {
	execlogdict = {}
	execlogdict['Operation'] = operate
	execlogdict['ActionDescriptor'] = desc
	execlogdict['Option'] = exeoption
	execlogjson = JSON.stringify(execlogdict, null, 4)
	console.log(execlogjson)
}
'''

def trgtjs_process(jst):
  jst = jst.replace('"""', '"')
  return jst

def execjs(jst):
  tmpjs = eruptjst+trgtjs_process(jst)
  result = subprocess.run('node', input=tmpjs, capture_output=True, text=True).stdout
  err = subprocess.run('node', input=tmpjs, capture_output=True, text=True).stderr
  if err:
    raise RuntimeError(err)
  return result

def psstr(tstr):
  if tstr.find('psChar_') == 0:
    r = psChar(tstr[7:]).tostr()
  else:
    r = tstr
  return r

def parsedict(tdict):
  if 'psclass' in tdict:
    psclass = psstr(tdict['psclass'])
  else:
    psclass = None
  descpy = ActionDescriptorPy(psclass)
  rdict = tdict['asdict']
  for key in rdict:
    tkey = psstr(key)
    pv = rdict[key]
    if type(pv) == dict:
      if 'asdict' in pv: #ActionDescriptor
        descpy[tkey] = parsedict(pv)
      if 'aslist' in pv: #ActionList
        descpy[tkey] = parselist(pv)
      if 'unit' in pv: #psUnitDouble
        descpy[tkey] = psUnitDouble(psstr(pv['unit']),pv['double'])
      if 'enumtype' in pv: #psEnumerated
        descpy[tkey] = psEnumerated(psstr(pv['enumtype']),psstr(pv['enumval']))
      if 'data' in pv: #psClass
        descpy[tkey] = psClass(psstr(pv['data']))
      if 'DesiredClass' in pv: #ActionReference
        descpy[tkey] = parseref(pv)
    else:
      descpy[tkey] = pv
  return descpy

def parselist(tdict):
  listpy = ActionListPy()
  rlist = tdict['aslist']
  for pv in rlist:
    if type(pv) == dict:
      if 'asdict' in pv: #ActionDescriptor
        listpy.append(parsedict(pv))
      if 'aslist' in pv: #ActionList
        listpy.append(parselist(pv))
      if 'unit' in pv: #psUnitDouble
        listpy.append(psUnitDouble(psstr(pv['unit']),pv['double']))
      if 'enumtype' in pv: #psEnumerated
        listpy.append(psEnumerated(psstr(pv['enumtype']),psstr(pv['enumval'])))
      if 'data' in pv: #psClass
        listpy.append(psClass(psstr(pv['data'])))
      if 'DesiredClass' in pv: #ActionReference
        listpy.append(parseref(pv))
    else:
      listpy.append(pv)
  return listpy

def parseref(tdict):
  dcls = psstr(tdict['DesiredClass'])
  vtype = tdict['FormType']
  if vtype != 'Class':
    if vtype == 'Enumerated':
      val = tdict['Value']
      val = psEnumerated(psstr(val['enumtype']),psstr(val['enumval']))
    else:
      val = tdict['Value']
      if type(val) == str:
        val = psstr(val)
  if vtype == 'Class':
    refpy = ActionReferencePy(dcls,vtype)
  else:
    refpy = ActionReferencePy(dcls,vtype,val)
    print(dcls,vtype,val)
  return refpy

def json2obj(jsont):
  obj_init = json.loads(jsont)
  obj_desc = parsedict(obj_init['ActionDescriptor']) if 'ActionDescriptor' in obj_init else None
  obj_operation = psstr(obj_init['Operation'])
  obj_option = obj_init['Option']
  return obj_operation,obj_desc,obj_option

if __name__ == '__main__':
  import sys
  jsfp = sys.argv[1]
  with open(jsfp) as jsf:
    jst = jsf.read()
    jstl = jst.split('// =======================================================')
    if jstl[0] == '':
      jstl.pop(0)
  app = ps.Application()
  psAM_settings['psapp'] = app
  for js in jstl:
    jsont = execjs(js)
    operation,obj,option = json2obj(jsont)
    print('// =======================================================')
    print('Operation:',operation)
    print('ActionDescriptor:'+('\n'+prettyrepr(obj) if obj else 'None'))
    psAM_settings['evalable_repr'] = True
    print('evalable_string:'+('\n'+repr(obj) if obj else 'None')+'\n')
    psAM_settings['evalable_repr'] = False
  os.system('pause')
